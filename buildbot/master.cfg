# -*- python -*-
# ex: set syntax=python:

c = BuildmasterConfig = {}

# import the stuff we're using
from buildbot.buildslave import BuildSlave
from buildbot.schedulers import basic, triggerable
from buildbot.schedulers.forcesched import *
from buildbot.changes import filter
from buildbot.changes.gitpoller import GitPoller
from buildbot.process.properties import Interpolate, renderer
from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Configure
from buildbot.steps.shell import Compile
from buildbot.steps.shell import SetPropertyFromCommand
from buildbot.steps.transfer import DirectoryUpload
from buildbot.steps.transfer import FileUpload
from buildbot.steps.master import MasterShellCommand
from buildbot.steps import trigger
from buildbot.status import html
from buildbot.status import words
from buildbot.status.web import authz, auth

import os
from os import path
import re
import string
import json
from pprint import pprint

# general configuration
c['protocols'] = {'pb': {'port': 9989}}
c['db'] = {'db_url': "sqlite:///state.sqlite"}
c['buildbotURL'] = "https://buildbot.meshwith.me/openwrt/"
c['title'] = "Meshbox"
c['titleURL'] = "https://github.com/seattlemeshnet/meshbox"
c['schedulers'] = []
c['builders'] = []
c['status'] = []

# gather profiles
builders = {}
files = [ f for f in os.listdir('builders') if path.isfile(path.join('builders', f)) ]
for f in files:
    name = string.split(f, '.')
    data = open(path.join('builders', f))
    builders[name[0]] = json.load(data)
    builders[name[0]]['slaves'] = []
    data.close()

# build configuration
secrets = {
    'httpPort': 'tcp:4321:interface=fc3d\:7777\:a6a4\:fcdb\:f218\:5856\:5de\:eb1a',
    'publishTo': '../www',

    # 'httpPort': 8010,
    # 'publishTo': './www',

    # irc bot
    'ircServer': 'fcf2:ff45:a10:2ca1:fb5c:426d:3505:4f18',
    'ircPort': 6667,
    'ircNickname': 'buildbot',
    'ircChannel': '#openwrt-dev'
}

codebases = {
    'openwrt-routing': {
        'repository': 'https://github.com/openwrt-routing/packages',
    },
    'meshbox': {
        'repository': 'https://github.com/SeattleMeshnet/meshbox',
    },
    # 'lgierth:meshbox': {
    #     'repository': 'https://github.com/lgierth/meshbox',
    #     'branch': None,
    #     'revision': None
    # },
    # 'hyperboria:cjdns': {
    #     'repository': 'https://github.com/hyperboria/cjdns',
    #     'branch': None,
    #     'revision': None
    # },
    # 'cjdelisle:cjdns': {
    #     'repository': 'https://github.com/cjdelisle/cjdns',
    #     'branch': None,
    #     'revision': None
    # }
}

def codebaseGenerator(chdict):
    repository = re.sub('\.git$', '', chdict['repository']['clone_url'])
    for codebase in codebases.keys():
        if codebases[codebase]['repository'] == repository:
            return codebase
c['codebaseGenerator'] = codebaseGenerator

# read and merge the passwords and slaves
secrets_data = open("secrets.json")
secrets.update(json.load(secrets_data))
secrets_data.close()
pprint(secrets)

# map builder -> slave -- when creating a builder, we need to assign
# it a list of slaves which will run its build
for slaveName in secrets['slaves'].keys():
    for builderName in secrets['slaves'][slaveName]['builders']:
        builderName = builderName.encode('us-ascii', 'replace')
        builders[builderName]['slaves'].append(slaveName)

pprint(builders)

# utility functions for conversion from unicode strings (emitted by json.load)
# to normal strings accepted by few buildbot classes.
def slaveFromSecret(name):
    slave = secrets['slaves'][name]
    return BuildSlave(name, slave['password'], max_builds=slave['jobs'])
def userFromSecret(name):
    return (name.encode('us-ascii', 'replace'),
            secrets['users'][name].encode('us-ascii', 'replace'))

# the build slaves
c['slaves'] = map(slaveFromSecret, secrets['slaves'])
c['slaves'].append(BuildSlave('None', 'enoN', max_builds=1))

class ChangeIsImportant:
    def __init__(self, builder):
        self.builder = builder;
    def __call__(self, change):
        if self.builder.get('filter'):
            for pattern in self.builder['filter']:
                for fn in change.files:
                    if re.match(pattern, fn):
                        return True
            return False
        else:
            return True

triggers = []
for builderName in builders.keys():
    builder = builders[builderName]
    triggerNames = builder.get('trigger')
    if triggerNames:
        for bName in triggerNames:
            triggers.append(bName)
    if builder.get('hooks') == True:
        c['schedulers'].append(basic.AnyBranchScheduler(
            name=builderName,
            codebases=codebases,
            fileIsImportant=ChangeIsImportant(builder),
            onlyImportant=True,
            treeStableTimer=10,
            builderNames=[builderName]))

for builderName in set(triggers):
    c['schedulers'].append(triggerable.Triggerable(
        name=builderName,
        codebases=codebases,
        builderNames=[builderName]))

c['schedulers'].append(
    ForceScheduler(name='force',
                   builderNames=builders.keys(),
                   codebases=codebases,
                   reason=FixedParameter(name='reason', default=''),
                   properties=[]))

# clone the code
def gitStep(codebase, config):
    return Git(codebase=codebase,
               repourl=config['repository'],
               workdir='build/' + codebase,
               haltOnFailure=True,
               name='git')

def scriptStep(builder):
    return ShellCommand(name='script',
                        command=builder['script'],
                        workdir='build/meshbox/',
                        haltOnFailure=True)

def triggerStep(schedulerNames):
    return trigger.Trigger(schedulerNames=schedulerNames,
                           updateSourceStamp=True,
                           waitForFinish=False,
                           haltOnFailure=True)

# we download if the md5sum changes
def sdkStep(builder):
    return ShellCommand(command=Interpolate('''
        if [ ! %(kw:md5sum)s = "`cat sdk.md5sum`" ]; then
            rm -rf OpenWrt-SDK* sdk.md5sum sdk/ &&
            wget --progress=dot %(kw:sdk)s &&
            tar -xf OpenWrt-SDK* &&
            mv -v $(ls -d OpenWrt-SDK-*/) sdk &&
            echo %(kw:md5sum)s > sdk.md5sum
        fi &&
        ([ ! -h sdk/package/cjdns ] || unlink sdk/package/cjdns) &&
        ([ ! -h sdk/package/luci-app-cjdns ] || unlink sdk/package/luci-app-cjdns) &&
        rm -rf sdk/bin/ sdk/tmp/
        ''', sdk=builder['sdk'], md5sum=builder['sdk_md5sum']),
        haltOnFailure=True,
        name='sdk')

def opkgStep(builder):
    return ShellCommand(command=Interpolate('''
        repo=$(cd ../openwrt-routing ; pwd) &&
        mkdir -p package/ &&
        ln -vs $repo/cjdns package/ &&
        ln -vs $repo/luci-app-cjdns/ package/ &&
        make package/cjdns/clean V=s &&
        make package/cjdns/compile V=s &&
        make package/luci-app-cjdns/clean V=s &&
        make package/luci-app-cjdns/compile V=s &&
        cd %(kw:dir)s/base &&
        ../../../../scripts/ipkg-make-index.sh . > Packages &&
        cat Packages | gzip > Packages.gz &&
        chmod 644 *
    ''', dir=builder['opkg']),
    workdir='build/sdk/',
    haltOnFailure=True,
    name='opkg')

def opkgUploadStep(builder):
    return DirectoryUpload(slavesrc=builder['opkg'] + '/base',
                           masterdest=Interpolate(secrets['publishTo'] + builder['opkg_destination']),
                           url=Interpolate(builder['opkg_destination']),
                           workdir='build/sdk/',
                           haltOnFailure=True,
                           name='opkg_upload')

# we download if the md5sum changes
def imagebuilderStep(builder):
    return ShellCommand(command=Interpolate('''
        if [ ! %(kw:md5sum)s = "`cat imagebuilder.md5sum`" ]; then
            rm -rf OpenWrt-ImageBuilder* imagebuilder.md5sum imagebuilder/ &&
            wget --progress=dot %(kw:imagebuilder)s &&
            tar -xf OpenWrt-ImageBuilder* &&
            mv -v $(ls -d OpenWrt-ImageBuilder-*/) imagebuilder &&
            cp imagebuilder/repositories.conf imagebuilder/repositories.conf.original &&
            echo %(kw:md5sum)s > imagebuilder.md5sum
        fi
        rm -rf imagebuilder/bin/ imagebuilder/files/ imagebuilder/dl/*
        ''', imagebuilder=builder['imagebuilder'], md5sum=builder['imagebuilder_md5sum']),
        haltOnFailure=True,
        name='imagebuilder')

def imagesStep(builder, profile):
    return ShellCommand(command=Interpolate('''
        cp repositories.conf.original repositories.conf &&
        echo %(kw:opkg_repo)s >> repositories.conf &&
        make image PROFILE=%(kw:profile)s PACKAGES="luci luci-app-cjdns cjdns kmod-ipt-nat6 kmod-nf-nat6 -kmod-ppp -ppp  luci-app-firewall"
    ''', opkg_repo=builder['opkg_repo'], profile=profile), workdir='build/imagebuilder/',
    haltOnFailure=True,
    name='images')

def imagesUploadStep(builder, image):
    return FileUpload(slavesrc=image['src'],
                      masterdest=Interpolate(secrets['publishTo'] + image['dest']),
                      mode=0644,
                      url=Interpolate(image['dest']),
                      workdir='build/imagebuilder/',
                      haltOnFailure=True,
                      name='images_upload')

def builderBuilder(builderName, slaveNames):
    factory = BuildFactory()
    builder = builders[builderName]

    for codebase in codebases:
        factory.addStep(gitStep(codebase, codebases[codebase]))

    if builder.get('opkg'):
        factory.addStep(sdkStep(builder))
        factory.addStep(opkgStep(builder))
    if builder.get('profiles'):
        factory.addStep(imagebuilderStep(builder))
        for profile in builder['profiles']:
            factory.addStep(imagesStep(builder, profile))

    if builder.get('script'):
        factory.addStep(scriptStep(builder))

    if builder.get('opkg_destination'):
        # TODO: download existing repo so we can keep old packages
        #       around in Packages.gz
        factory.addStep(opkgUploadStep(builder))
    if builder.get('images'):
        # TODO: skip if target dir is non-empty
        for image in builder['images']:
            factory.addStep(imagesUploadStep(builder, image))

    if builder.get('trigger'):
        factory.addStep(triggerStep(builder['trigger']))

    return BuilderConfig(name=builderName, slavenames=slaveNames, factory=factory)

for builderName in builders.keys():
    slaveNames = builders[builderName]['slaves']
    if len(slaveNames) == 0:
        slaveNames.append('None')
    c['builders'].append(builderBuilder(builderName, slaveNames))

users = map(userFromSecret, secrets['users'])
c['status'].append(html.WebStatus(
    http_port=secrets['httpPort'],
    authz=authz.Authz(
        auth=auth.BasicAuth(users),
        cleanShutdown='auth',
        gracefulShutdown='auth',
        forceBuild='auth',
        forceAllBuilds='auth',
        pingBuilder='auth',
        stopBuild='auth',
        stopAllBuilds='auth',
        cancelPendingBuild='auth',
        cancelAllPendingBuilds='auth'),
    change_hook_dialects={
        'github': {
            'secret': secrets['changeHookSecret'].encode('us-ascii', 'replace'),
            'strict': True,
            'codebase': codebaseGenerator
        }
    },
))

c['status'].append(words.IRC(secrets['ircServer'], secrets['ircNickname'],
    channels=[{"channel": secrets['ircChannel']}],
    port=secrets['ircPort'],
    notify_events={
      'exception': 1,
      'failure': 1,
      'failureToSuccess': 1,
      'success': 1,
      'successToFailure': 1,
    }))
